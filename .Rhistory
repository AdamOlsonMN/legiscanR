example <- as.data.frame(read.dta(paste0(url, "SharonRatliff-task3.dta")))
# Display the variable names to show the data were downloaded from the server
names(example)
# Just to make sure, also print a bunch of summary statistics
summary(example)
library(psych)
?sim.rasch
test <- as.data.frame(sim.rasch(nvar = 20, n = 28, low = -4, high = 4, a = 1, mu = -0.125, sd = 1))
test <- sim.rasch(nvar = 20, n = 28, low = -4, high = 4, a = 1, mu = -0.125, sd = 1)
View(test)
View(test@items)
View(test$items)
?read.txt
?read
?read.text
?read.csv
textExample <- read.table("~/Desktop/Dropbox/JSU/Fall2014/20141118/textexample.txt", #
header = TRUE, sep = ",", stringsAsFactors = FALSE)
View(textExample)
?rowsum
?sum
x <- cbind(x1 = 3, x2 = c(4:1, 2:5))
View(x)
rowSums(x)
colSums(x)
testData <- as.data.frame(test$items)
testData2 <- cbind(seq(1, 28, 1), testData)
View(testData2)
testData2 <- cbind(id = seq(1, 28, 1), testData)
names(testData2)
testData <- cbind(id = seq(1, 28, 1), as.data.frame(test$items))
ggplot(testData, aes(x = V13, y = total)) + geom_box()
testData$total <- rowSums(testData[, -1])
ggplot(testData, aes(x = V13, y = total)) + geom_boxplot()
View(testData)
?geom_boxplot
ggplot(testData, aes(x = factor(V13), y = total)) + geom_boxplot()
?biserial
biserial(testData$V13, testData$total)
biserial(factor(testData$V13), testData$total)
biserial(testData$total, testData$V13)
f <- function(dataFrame, index) { }
return(biserial(dataSample$total, dataSample$V13))
library(boot)
bootstrapped.biserial <- boot(testData, f, R = 1000)
summary(bootstrapped.biserial)
cor(testData$studentid, testData$total)
cor(testData$id, testData$total)
f <- function(dataFrame, index) {
dataSample <- dataFrame[index, ]
return(cor(dataSample$total, dataSample$id))
return(biserial(dataSample$total, dataSample$V13, ))
rm(f)
library(polycor)
?polycor
?polychor
install.packages(ltm, dep = TRUE)
install.packages("msm", dep = TRUE)
install.packages("msm", dep = TRUE, type = "source")
install.packages("ltm", dep = TRUE)
library(ltm)
?ltm
incorrect <- biserial.cor(dataSample$total, dataSample$V13)
correct <- biserial.cor(dataSample$total, dataSample$V13, level = 2)
return(cbind(incorrect, correct))
f <- function(dF, i) {
dataSample <- dF[i, ]
return(biserial.cor(dataSample$total, dataSample$V13, level = 2))
}
bootcorr <- boot(testData, f, R = 500)
bootcorr <- boot(testData, f, R = 5000)
bootcorr
?boot
summary(bootcorr)
hrow = c(" ", "Nominal", "Ordinal", "Intervallic/Ratio")
nrow = c("Nominal", "Tetrachoric", "Rank Biserial", "Point Biserial")
orow = c("Ordinal", "Rank Biserial", "Polychoric", "Polyserial")
irow = c("Intervallic/Ratio", "Point Biserial", "Polyserial", "Pearson's r")
corrs <- rbind(hrow, nrow, orow, irow)
corrs
install.packages("pander", dep = TRUE)
library(pander)
pander(corrs)
?pander
?pandoc
pandoc.table.return(corrs)
pandoc.table.return(corrs, style = "rmarkdown")
pandoc(corrs)
pandoc(corrs, style = "simple")
pandoc(corrs, style = "grid")
corrs <- rbind(c("Nominal", "Tetrachoric", "Rank Biserial", "Point Biserial"),
names(corrs) <- c(" ", "Nominal", "Ordinal", "Intervallic/Ratio")
pandoc(corrs, style = "rmarkdown")
corrs <- rbind(c(" ", "Nominal", "Ordinal", "Intervallic/Ratio"),
c("Nominal", "Tetrachoric", "Rank Biserial", "Point Biserial"),
c("Ordinal", "Rank Biserial", "Polychoric", "Polyserial"),
c("Intervallic/Ratio", "Point Biserial", "Polyserial", "Pearson's r"))
pander(corrs, style = "rmarkdown")
pander(corrs, style = "simple")
?rnorm
install.packages("VGAM", dep = TRUE)
library(vgam)
library(VGAM)
?rsnorm
x <- rskewnorm(850, 1.5, 1, 0)
plot(x)
library(ggplot2)
x <- rskewnorm(850, 1.5, 2, 0)
x <- rskewnorm(850, 1.5, 4, 0)
x <- rskewnorm(850, 1.5, 4, 1)
x <- rskewnorm(850, 1.5, 4, -3)
x <- rskewnorm(850, 1.5, 2, -3)
x <- rskewnorm(850, 1.5, 1, -3)
x <- rskewnorm(850, 3.5, 1, -3)
x <- round(rskewnorm(850, 3.5, 1, -3), 0)
x <- round(rskewnorm(850, 3.5, .5, -4), 0)
x <- round(rskewnorm(850, 3.5, .75, -4), 0)
x <- round(rskewnorm(850, 3.85, .75, -4), 0)
set.seed(7779311)
x <- round(rskewnorm(850, 3.99, .75, -4), 0)
x <- rskewnorm(890, 0, .25, 0)
x <- rskewnorm(890, 0, .005, 0)
x <- rskewnorm(890, 0, 5, 0)
x <- rskewnorm(890, 0, 1, .5)
qplot(x)
growrla <- round(rskewnorm(890, 61.6764, 4.300454, -.3158577), 0)
growmth <- round(rskewnorm(890, 68.36251, 3.411649, -.0636846), 0)
eval <- round(rskewnorm(890, 3.99, .75, -4), 0)
growrla <- rskewnorm(890, 61.6764, 4.300454, -.3158577)
growmth <- rskewnorm(890, 68.36251, 3.411649, -.0636846)
qplot(growrla)
qplot(growmth)
corr(eval, growrla, growmth)
cor(eval, growrla, growmth)
?cor
cor(eval, growrla)
cor(eval, growmth)
qplot(eval, growrla)
library(foreign)
url <- "http://www.paces-consulting.org/stata/JSU/Fall2014/"
jdoe <- <- as.data.frame(read.dta(paste0(url,
"JohnDoe-finals.dta")))
jdoe <- <- as.data.frame(read.dta(paste0(url, "JohnDoe-finals.dta")))
jdoe <- as.data.frame(read.dta(paste0(url, "JohnDoe-finals.dta")))
names(jdoe)
q()
?rbind.fill
?setMethod
?setClass
?state.abbr
?st.abbr
x <- state.abbr
?data
data()
LegiScan <- setClass("LegiScan",
slots = list(api = "character"))
LegiStates <- setClass("LegiStates",
contains = LegiScan,
slots = list(state = "character"),
validity = function(object) {
if (length(object@state) != 2) {
return("Error: The state slot must be the two letter state abbrviation")
} else if (!(object@state %in% state.abb)) {
return("Error: Invalid state abbreviation")
} else {
return(TRUE)
}
})
LegiStates <- setClass("LegiStates",
contains = LegiScan,
slots = list(state = "character",
api = LegiScan@api),
validity = function(object) {
if (length(object@state) != 2) {
return("Error: The state slot must be the two letter state abbrviation")
} else if (!(object@state %in% state.abb)) {
return("Error: Invalid state abbreviation")
} else {
return(TRUE)
}
})
LegiStates <- setClass("LegiStates",
contains = LegiScan,
slots = list(state = "character",
api = LegiScan),
validity = function(object) {
if (length(object@state) != 2) {
return("Error: The state slot must be the two letter state abbrviation")
} else if (!(object@state %in% state.abb)) {
return("Error: Invalid state abbreviation")
} else {
return(TRUE)
}
})
?setClass
LegiStates <- setClass("LegiStates",
contains = LegiScan@api,
slots = list(state = "character"),
validity = function(object) {
if (length(object@state) != 2) {
return("Error: The state slot must be the two letter state abbrviation")
} else if (!(object@state %in% state.abb)) {
return("Error: Invalid state abbreviation")
} else {
return(TRUE)
}
})
LegiScan <- setClass("LegiScan",
slots = list(api = "character"))
LegiScan <- setClass("LegiScan",
slots = list(api = "character"),
validity = function(object) {
if (is.null(api) == TRUE) {
return("Error: LegiScan API Key must be non-null")
} else if (is.na(api) == TRUE) {
return("Error: LegiScan API Key must be non-missing")
} else {
return(TRUE)
}
})
LegiStates <- setClass("LegiStates",
contains = LegiScan@api,
slots = list(state = "character"),
validity = function(object) {
if (length(object@state) != 2) {
return("Error: The state slot must be the two letter state abbrviation")
} else if (!(object@state %in% state.abb)) {
return("Error: Invalid state abbreviation")
} else {
return(TRUE)
}
})
LegiStates <- setClass("LegiStates",
contains = "LegiScan",
slots = list(state = "character"),
validity = function(object) {
if (length(object@state) != 2) {
return("Error: The state slot must be the two letter state abbrviation")
} else if (!(object@state %in% state.abb)) {
return("Error: Invalid state abbreviation")
} else {
return(TRUE)
}
})
str(LegiStates)
slots(LegiStates)
?setMethod
LegiScan <- setClass("LegiScan",
slots = list(api = "character",
state = "character",
rootURL = "character",
)
validity = function(object) {
if (is.null(api) == TRUE) {
return("Error: LegiScan API Key must be non-null")
}
if (is.na(api) == TRUE) {
return("Error: LegiScan API Key must be non-missing")
}
if (length(state) != 2) {
return("Error: The state slot must be the two letter state abbrviation")
}
if (!(state %in% state.abb)) {
return("Error: Invalid state abbreviation")
}
else {
return(TRUE)
}
})
LegiScan <- setClass("LegiScan",
slots = list(api = "character",
state = "character",
rootURL = "character")
validity = function(object) {
if (is.null(api) == TRUE) {
return("Error: LegiScan API Key must be non-null")
}
if (is.na(api) == TRUE) {
return("Error: LegiScan API Key must be non-missing")
}
if (length(state) != 2) {
return("Error: The state slot must be the two letter state abbrviation")
}
if (!(state %in% state.abb)) {
return("Error: Invalid state abbreviation")
}
else {
return(TRUE)
}
})
rm(LegiScan)
rm(LegiStates)
LegiScan <- setClass("LegiScan",
slots = list(api = "character",
state = "character",
rootURL = "character")
validity = function(object) {
if (is.null(api) == TRUE) {
return("Error: LegiScan API Key must be non-null")
}
if (is.na(api) == TRUE) {
return("Error: LegiScan API Key must be non-missing")
}
if (length(state) != 2) {
return("Error: The state slot must be the two letter state abbrviation")
}
if (!(state %in% state.abb)) {
return("Error: Invalid state abbreviation")
}
else {
return(TRUE)
}
})
LegiScan <- setClass("LegiScan",
slots = list(api = "character",
state = "character",
rootURL = "character")
validity = function(object) {
if (is.null(api) == TRUE) {
return("Error: LegiScan API Key must be non-null")
}
if (is.na(api) == TRUE) {
return("Error: LegiScan API Key must be non-missing")
}
if (!is.na(state) && length(state) != 2) {
return("Error: The state slot must be the two letter state abbrviation")
}
if (!is.na(state) && !(state %in% state.abb)) {
return("Error: Invalid state abbreviation")
}
else {
return(TRUE)
}
})
LegiScan <- setClass("LegiScan",
slots = list(api = "character",
state = "character",
rootURL = "character"),
validity = function(object) {
if (is.null(api) == TRUE) {
return("Error: LegiScan API Key must be non-null")
}
if (is.na(api) == TRUE) {
return("Error: LegiScan API Key must be non-missing")
}
if (!is.na(state) && length(state) != 2) {
return("Error: The state slot must be the two letter state abbrviation")
}
if (!is.na(state) && !(state %in% state.abb)) {
return("Error: Invalid state abbreviation")
}
else {
return(TRUE)
}
})
LegiScan <- setClass("LegiScan",
slots = list(api = "character"),
validity = function(object) {
if (is.null(api) == TRUE) {
return("Error: LegiScan API Key must be non-null")
} else if (is.na(api) == TRUE) {
return("Error: LegiScan API Key must be non-missing")
} else {
return(TRUE)
}
})
LegiStates <- setClass("LegiStates",
contains = "LegiScan",
slots = list(state = "character"),
validity = function(object) {
if (length(object@state) != 2) {
return("Error: The state slot must be the two letter state abbrviation")
} else if (!(object@state %in% state.abb)) {
return("Error: Invalid state abbreviation")
} else {
return(TRUE)
}
})
LegiSession <- setClass("LegiSession",
contains = "LegiStates",
slots = list(session_id = "list"))
LegiMaster <- setClass("LegiMaster",
contains = "LegiScan",
slots = list(state = "character",
id = "character"),
validity = function(object) {
if (length(object@state) != 2) {
return("Error: The state slot must be the two letter state abbrviation")
} else if (!(object@state %in% state.abb)) {
return("Error: Invalid state abbreviation")
} else {
return(TRUE)
}
})
LegiBill <- setClass("LegiBill",
slots = list(id = "character",
state = "character",
bill = "character"))
source('~/.active-rstudio-document')
?new.env
?get
source('~/Desktop/Programs/R/legiscanR/R/billdata.R')
source('~/Desktop/Programs/R/legiscanR/R/billids.R')
source('~/Desktop/Programs/R/legiscanR/R/legiBillProg.R')
rm(LegiBill, LegiMaster, LegiScan, LegiSession, LegiStates)
##' @title Build Directory Tree Object for Legiscan Data Downloads
source('~/Desktop/Programs/R/legiscanR/R/fileStructure.R')
source('~/Desktop/Programs/R/legiscanR/R/fileLists.R')
d <- fileStructure("~/Desktop/Programs/R/legiscanR/data/msHistoricalJSON/")
files <- fileLists(d)
y <- legiBillProg(files[[1]][[1]])
library(jsonlite)
library(plyr)
y <- legiBillProg(files[[1]][[1]])
?quote
source('~/Desktop/Programs/R/legiscanR/R/legiBillProg.R')
y <- legiBillProg(files[[1]][[1]])
source('~/Desktop/Programs/R/legiscanR/R/legiBillProg.R')
y <- legiBillProg(files[[1]][[1]])
y <- legiBillProg(files[[1]][[1]][[1]])
library(magrittr)
y <- legiBillProg(files[[1]][[1]][[1]])
q()
install.packages("broom")
devtools::install_github("dgrtwo/broom")
devtools::install_github("wbuchanan/legiscanR")
uninstall.package(legiscanR)
?remove.package
?remove.packages
remove.packages("legiscanR")
url <- "http://www.paces-consulting.org/stata/JSU/Fall2014/"
x <- as.data.frame(foreign::read.dta(paste0(url, "KimberlyHolmes-finals.dta")))
names(x)
setwd("~/Desktop/Programs/R/legiscanR")
source("R/legiscanBill.R")
files <- readRDS("../msHistoricalXML/fileList.Rds")
library(lubridate)
library(plyr)
library(dplyr)
library(XML)
library(magrittr)
library(httr)
library(RCurl)
library(doMC)
registerDoMC(cores = 12)
bills <- list()
for (i in names(files[["bills"]])) {
bills[[i]] <- plyr::llply(files[["bills"]][[i]], legiscanBill,
fullText = "state_link", .parallel = TRUE)
}
rm(files, i, legiscanBill); gc()
billHist <- list()
billProg <- list()
billSpons <- list()
billMeta <- list()
billVotes <- list()
bills2 <- plyr::llply(bills, unlist, recursive = FALSE, .parallel = TRUE)
rm(bills); gc()
for (i in names(bills2)) {
# Combine all of the bill metadata into a single data frame per
# legislative session
billMeta[[i]] <- plyr::ldply(bills2[[i]][names(bills2[[i]]) == "billMeta"],
dplyr::bind_rows, .parallel = TRUE)
# Combine all of the bill history data into a single data frame per
# legislative session
billHist[[i]] <- plyr::ldply(bills2[[i]][names(bills2[[i]]) == "history"],
dplyr::bind_rows, .parallel = TRUE)
# Combine all of the bill progress data into a single data frame per
# legislative session
billProg[[i]] <- plyr::ldply(bills2[[i]][names(bills2[[i]]) == "progress"],
dplyr::bind_rows, .parallel = TRUE)
# Combine all of the bill sponsors data into a single data frame per
# legislative session
billSpons[[i]] <- plyr::ldply(bills2[[i]][names(bills2[[i]]) == "sponsors"],
dplyr::bind_rows, .parallel = TRUE)
billVotes[[i]] <- plyr::ldply(bills2[[i]][names(bills2[[i]]) == "votes"],
dplyr::bind_rows, .parallel = TRUE)
}
billMeta2 <- plyr::ldply(billMeta, .id = "session_name", .parallel = TRUE, dplyr::bind_rows)
billMeta2 <- billMeta2[, -2]; billMeta2$session_name <- as.character(billMeta2$session_name)
meta <- names(billMeta2); meta <- meta[-19]; billMeta2 <- billMeta2[, meta]
saveRDS(billMeta2, file = "../msHistoricalXML/billmeta.Rds", compress = FALSE)
rm(billMeta2, billMeta, i, meta); gc()
billHist2 <- plyr::ldply(billHist, .id = "session_name", .parallel = TRUE, dplyr::bind_rows)
billHist2 <- billHist2[, -2]; billHist2$session_name <- as.character(billHist2$session_name)
saveRDS(billHist2, file = "../msHistoricalXML/billHistory.Rds", compress = FALSE)
rm(billHist2, billHist)
gc()
billProg2 <- plyr::ldply(billProg, .id = "session_name", .parallel = TRUE, dplyr::bind_rows)
billProg2 <- billProg2[, -2]; billProg2$session_name <- as.character(billProg2$session_name)
saveRDS(billProg2, file = "../msHistoricalXML/billProgress.Rds", compress = FALSE)
rm(billProg2, billProg); gc()
billSpons2 <- plyr::ldply(billSpons, .id = "session_name", .parallel = TRUE, dplyr::bind_rows)
billSpons2 <- billSpons2[, -2]; billSpons2$session_name <- as.character(billSpons2$session_name)
saveRDS(billSpons2, file = "../msHistoricalXML/billSponsors.Rds", compress = FALSE)
rm(billSpons2, billSpons); gc()
billVotes2 <- plyr::ldply(billVotes, .id = "session_name", .parallel = TRUE, dplyr::bind_rows)
billVotes2 <- billSpons2[, -2]; billVotes2$session_name <- as.character(billVotes2$session_name)
billVotes2 <- plyr::ldply(billVotes, .id = "session_name", .parallel = TRUE, dplyr::bind_rows)
billVotes2 <- billVotes2[, -2]; billVotes2$session_name <- as.character(billVotes2$session_name)
saveRDS(billVotes2, file = "../msHistoricalXML/billVotes.Rds", compress = FALSE)
rm(billVotes, billVotes2); gc()
billTxt <- list()
for (i in names(bills2)) {
# Combine all of the bill text data into a single data frame per
# legislative session
billTxt[[i]] <- plyr::ldply(bills2[[i]][names(bills2[[i]]) == "texts"],
dplyr::bind_rows, .parallel = TRUE)
} # End of Loop
billTxt2 <- plyr::ldply(billTxt, .id = "session_name", .parallel = TRUE, dplyr::bind_rows)
billTxt2 <- billTxt2[, -2]; billTxt2$session_name <- as.character(billTxt2$session_name)
saveRDS(billTxt2, file = "../msHistoricalXML/billText.Rds", compress = FALSE)
